const fs = require('fs');const path = require('path');const { promisify } = require('util');const readdir = promisify(fs.readdir);const stat = promisify(fs.stat);const readFile = promisify(fs.readFile);const writeFile = promisify(fs.writeFile);const ignoreFolders = ['node_modules', '.git', 'archives', 'temp', 'logs'];const targetExtensions = ['.js', '.jsx', '.ts', '.tsx'];async function walk(dir) {  let files = await readdir(dir);  files = await Promise.all(files.map(async file => {    const filePath = path.join(dir, file);    const stats = await stat(filePath);    if (stats.isDirectory()) {      if (ignoreFolders.includes(file)) {        return [];      }      return walk(filePath);    } else if (stats.isFile() && targetExtensions.includes(path.extname(file))) {      return filePath;    }    return [];  }));  return files.flat();}function removeComments(code) {  return code    .replace(/\/\*[\s\S]*?\*\    .replace(/\/\/ .*/g, '')     .replace(/\/\/\t.*/g, '')     .replace(/\/\/$/gm, '')     .replace(/\n\s*\n\s*\n/g, '\n\n')     .replace(/^\s*[\r\n]/gm, '\n')     .replace(/^[ \t]+$/gm, ''); }async function processFile(filePath) {  try {    const content = await readFile(filePath, 'utf8');    const cleanedContent = removeComments(content);    if (content !== cleanedContent) {      await writeFile(filePath, cleanedContent, 'utf8');      console.log(`Cleaned: ${filePath}`);      return 1;    }    return 0;  } catch (error) {    console.error(`Error processing file ${filePath}: ${error.message}`);    return 0;  }}async function main() {  try {    const start = Date.now();    console.log('Scanning for JavaScript files...');    const jsFiles = await walk(process.cwd());    console.log(`Found ${jsFiles.length} JavaScript files.`);    console.log('Removing comments...');    let processedCount = 0;    for (const file of jsFiles) {      processedCount += await processFile(file);    }    const end = Date.now();    console.log(`Done! Processed ${processedCount} files in ${(end - start) / 1000} seconds.`);  } catch (error) {    console.error('Error:', error);  }}main(); 