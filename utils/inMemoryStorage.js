const fs = require('fs');const path = require('path');const { v4: uuidv4 } = require('uuid');class InMemoryStorage {  constructor(name) {    this.name = name;    this.items = new Map();    this.idCounter = 1;    console.log(`InMemoryStorage "${name}" initialized`);  }  add(item) {    const id = item.id || `${this.name}_${this.idCounter++}`;    const newItem = { ...item, id };    this.items.set(id, newItem);    return newItem;  }  get(id) {    return this.items.has(id) ? { ...this.items.get(id) } : null;  }  update(id, updates) {    if (!this.items.has(id)) return null;    const item = this.items.get(id);    const updatedItem = { ...item, ...updates, id };    this.items.set(id, updatedItem);    return { ...updatedItem };  }  remove(id) {    if (!this.items.has(id)) return false;    return this.items.delete(id);  }  getAll() {    return Array.from(this.items.values()).map(item => ({ ...item }));  }  find(filterFn) {    return this.getAll().filter(filterFn);  }  count() {    return this.items.size;  }  clear() {    this.items.clear();    this.idCounter = 1;    return true;  }}module.exports = InMemoryStorage; 