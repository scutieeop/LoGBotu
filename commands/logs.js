const { EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, ButtonBuilder, ButtonStyle, ApplicationCommandOptionType, PermissionFlagsBits } = require('discord.js');module.exports = {  name: 'logs',  description: 'Log kayıtlarını görüntüle ve sorgula',  usage: '.logs [tip] [limit] [kullanıcı] [kanal]',  category: 'admin',  permissions: [PermissionFlagsBits.ViewAuditLog],  async execute(message, args, client) {    if (!message.member.permissions.has(PermissionFlagsBits.ViewAuditLog)) {      return message.reply('Bu komutu kullanma yetkiniz yok!');    }    const startTime = Date.now();    if (!client.customLogs) {      return message.reply('Log sistemi henüz başlatılmamış.');    }    let type = args[0] || 'all';    let limit = parseInt(args[1]) || 10;    if (limit > 25) limit = 25;    let userId = null;    if (args[2]) {      userId = args[2].replace(/[<@!>]/g, '');    }    let channelId = null;    if (args[3]) {      channelId = args[3].replace(/[<#>]/g, '');    }    const validTypes = ['system', 'security', 'command', 'error', 'userActivity', 'performance'];    if (!validTypes.includes(type) && type !== 'all') {      type = 'all';    }    let logs = [];    let userName = userId ? 'bilinmeyen kullanıcı' : null;    let channelName = channelId ? 'bilinmeyen kanal' : null;    try {      if (userId) {        const user = await client.users.fetch(userId).catch(() => null);        if (user) userName = user.tag;      }      if (channelId) {        const channel = await client.channels.fetch(channelId).catch(() => null);        if (channel) channelName = channel.name;      }      if (type === 'all') {        const combinedLogs = [];        await Promise.all(validTypes.map(async (logType) => {          const typeLogs = await client.customLogs.getLogsByDateRange(            new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),             new Date(),            logType          );          if (typeLogs && typeLogs.length > 0) {            combinedLogs.push(...typeLogs);          }        }));        logs = combinedLogs          .filter(log => {            let match = true;            if (userId && log.userId !== userId) match = false;            if (channelId && log.details && log.details.channelId !== channelId) match = false;            return match;          })          .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))          .slice(0, limit);      } else {        logs = await client.customLogs.getLogsByDateRange(          new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),           new Date(),          type        );        logs = logs          .filter(log => {            let match = true;            if (userId && log.userId !== userId) match = false;            if (channelId && log.details && log.details.channelId !== channelId) match = false;            return match;          })          .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))          .slice(0, limit);      }      if (logs.length === 0) {        const embed = new EmbedBuilder()          .setTitle('📋 Log Sorgusu')          .setDescription('Belirlenen kriterlere göre log bulunamadı.')          .setColor('#F04747')          .setTimestamp();        return message.reply({ embeds: [embed] });      }      const totalPages = Math.ceil(logs.length / 5);      let currentPage = 1;      const generateEmbed = (page) => {        const startIndex = (page - 1) * 5;        const endIndex = Math.min(startIndex + 5, logs.length);        const pageItems = logs.slice(startIndex, endIndex);        const embed = new EmbedBuilder()          .setTitle('📋 Log Sorgusu')          .setDescription(`${type === 'all' ? 'Tüm' : type} log kayıtları ${userId ? `- Kullanıcı: ${userName}` : ''} ${channelId ? `- Kanal: ${channelName}` : ''}`)          .setColor('#5865F2')          .setFooter({ text: `Sayfa ${page}/${totalPages} • Toplam ${logs.length} kayıt` })          .setTimestamp();        pageItems.forEach((log, index) => {          const date = new Date(log.timestamp);          const severity = log.severity || 'INFO';          const severityEmojis = {            'DEBUG': '🔍',            'INFO': 'ℹ️',            'NOTICE': '📝',            'WARNING': '⚠️',            'ERROR': '❌',            'CRITICAL': '🔥',            'ALERT': '🚨',            'EMERGENCY': '☢️'          };          let fieldContent = `**Zaman:** <t:${Math.floor(date.getTime() / 1000)}:F>\n`;          fieldContent += `**Tip:** ${log.type}\n`;          fieldContent += `**Seviye:** ${severityEmojis[severity] || ''} ${severity}\n`;          if (log.userId && !userId) {            fieldContent += `**Kullanıcı:** <@${log.userId}>\n`;          }          if (log.guildId) {            fieldContent += `**Sunucu ID:** ${log.guildId}\n`;          }          if (log.content) {            fieldContent += `**İçerik:** ${log.content}\n`;          }          if (log.details && Object.keys(log.details).length > 0) {            fieldContent += `**Detaylar:**\n`;            const detailKeys = Object.keys(log.details).slice(0, 3);            detailKeys.forEach(key => {              const value = log.details[key];              if (value !== null && value !== undefined) {                const displayValue = typeof value === 'object'                   ? '[Nesne]'                   : String(value).substring(0, 100);                fieldContent += `- ${key}: ${displayValue}\n`;              }            });            if (Object.keys(log.details).length > 3) {              fieldContent += `...ve ${Object.keys(log.details).length - 3} daha fazla detay\n`;            }          }          embed.addFields({            name: `#${startIndex + index + 1} - ${log.id.substring(0, 8)}`,            value: fieldContent,            inline: false          });        });        return embed;      };      const generateButtons = (page) => {        const row = new ActionRowBuilder().addComponents(          new ButtonBuilder()            .setCustomId(`logs_first_${message.author.id}`)            .setLabel('◀◀')            .setStyle(ButtonStyle.Secondary)            .setDisabled(page === 1),          new ButtonBuilder()            .setCustomId(`logs_prev_${message.author.id}`)            .setLabel('◀')            .setStyle(ButtonStyle.Primary)            .setDisabled(page === 1),          new ButtonBuilder()            .setCustomId(`logs_next_${message.author.id}`)            .setLabel('▶')            .setStyle(ButtonStyle.Primary)            .setDisabled(page === totalPages),          new ButtonBuilder()            .setCustomId(`logs_last_${message.author.id}`)            .setLabel('▶▶')            .setStyle(ButtonStyle.Secondary)            .setDisabled(page === totalPages),          new ButtonBuilder()            .setCustomId(`logs_export_${message.author.id}`)            .setLabel('📥 Dışa Aktar')            .setStyle(ButtonStyle.Success)        );        const typeMenu = new ActionRowBuilder().addComponents(          new StringSelectMenuBuilder()            .setCustomId(`logs_type_${message.author.id}`)            .setPlaceholder('Log tipi seçin')            .addOptions([              { label: 'Tüm Loglar', value: 'all', default: type === 'all' },              { label: 'Sistem Logları', value: 'system', default: type === 'system' },              { label: 'Güvenlik Logları', value: 'security', default: type === 'security' },              { label: 'Komut Logları', value: 'command', default: type === 'command' },              { label: 'Hata Logları', value: 'error', default: type === 'error' },              { label: 'Kullanıcı Aktiviteleri', value: 'userActivity', default: type === 'userActivity' },              { label: 'Performans Logları', value: 'performance', default: type === 'performance' }            ])        );        return [row, typeMenu];      };      const embed = generateEmbed(currentPage);      const components = generateButtons(currentPage);      const reply = await message.reply({        embeds: [embed],        components      });      const filter = i => i.customId.includes(message.author.id);      const collector = reply.createMessageComponentCollector({ filter, time: 300000 });      collector.on('collect', async (interaction) => {        await interaction.deferUpdate();        if (interaction.customId === `logs_export_${message.author.id}`) {          try {            const exportPath = await client.customLogs.exportLogs(              type === 'all' ? null : type,              new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),              new Date()            );            if (!exportPath) {              await interaction.followUp({ content: 'Dışa aktarılacak log bulunamadı.', ephemeral: true });              return;            }            await interaction.followUp({ content: `Loglar başarıyla dışa aktarıldı:\n${exportPath}`, ephemeral: true });          } catch (error) {            console.error('Log export error:', error);            await interaction.followUp({ content: 'Loglar dışa aktarılırken bir hata oluştu.', ephemeral: true });          }          return;        }        if (interaction.customId === `logs_first_${message.author.id}`) {          currentPage = 1;        } else if (interaction.customId === `logs_prev_${message.author.id}`) {          currentPage = Math.max(1, currentPage - 1);        } else if (interaction.customId === `logs_next_${message.author.id}`) {          currentPage = Math.min(totalPages, currentPage + 1);        } else if (interaction.customId === `logs_last_${message.author.id}`) {          currentPage = totalPages;        } else if (interaction.customId === `logs_type_${message.author.id}`) {          type = interaction.values[0];          if (type === 'all') {            const combinedLogs = [];            await Promise.all(validTypes.map(async (logType) => {              const typeLogs = await client.customLogs.getLogsByDateRange(                new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),                 new Date(),                logType              );              if (typeLogs && typeLogs.length > 0) {                combinedLogs.push(...typeLogs);              }            }));            logs = combinedLogs              .filter(log => {                let match = true;                if (userId && log.userId !== userId) match = false;                if (channelId && log.details && log.details.channelId !== channelId) match = false;                return match;              })              .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))              .slice(0, limit);          } else {            logs = await client.customLogs.getLogsByDateRange(              new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),               new Date(),              type            );            logs = logs              .filter(log => {                let match = true;                if (userId && log.userId !== userId) match = false;                if (channelId && log.details && log.details.channelId !== channelId) match = false;                return match;              })              .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))              .slice(0, limit);          }          if (logs.length === 0) {            const noLogsEmbed = new EmbedBuilder()              .setTitle('📋 Log Sorgusu')              .setDescription('Belirlenen kriterlere göre log bulunamadı.')              .setColor('#F04747')              .setTimestamp();            await reply.edit({ embeds: [noLogsEmbed], components: [] });            return;          }          currentPage = 1;        }        const newEmbed = generateEmbed(currentPage);        const newComponents = generateButtons(currentPage);        await reply.edit({          embeds: [newEmbed],          components: newComponents        });      });      collector.on('end', () => {        reply.edit({ components: [] }).catch(() => {});      });      const processingTime = Date.now() - startTime;      client.customLogs.logCommand(        'logs',        message.author.id,        message.guild.id,        true,        processingTime,        null      );    } catch (error) {      console.error('Error executing logs command:', error);      client.customLogs.logError(error, 'logs command', message.author.id, message.guild.id);      return message.reply('Loglar görüntülenirken bir hata oluştu.');    }  }}; 