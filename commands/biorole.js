const { PermissionFlagsBits } = require('discord.js');const fs = require('fs');module.exports = {  name: 'biorole',  description: 'Biyografi içeriğine göre otomatik rol verme sistemini yönetir',  async execute(message, args, client) {    if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {      return message.reply('Bu komutu kullanmak için yönetici yetkisine sahip olmanız gerekiyor.');    }    if (args.length < 1) {      return message.reply(`**Biyografi Rol Sistemi Komutları:**\`.biorole ekle <metin> <@rol>\` - Biyografide belirli bir metin olduğunda verilecek rolü ayarlar\`.biorole kaldir <metin>\` - Biyografi-rol eşleşmesini kaldırır\`.biorole liste\` - Ayarlanan tüm biyografi-rol eşleşmelerini gösterir\`.biorole otomatikkaldir <açık/kapalı>\` - Biyografiden metin kaldırıldığında rolün otomatik kaldırılmasını ayarlar`);    }    const subCommand = args[0].toLowerCase();    if (!client.config.bioRoles) {      client.config.bioRoles = {};    }    if (!client.config.bioRoles[message.guild.id]) {      client.config.bioRoles[message.guild.id] = {        autoRemove: true       };    }    const guildBioRoles = client.config.bioRoles[message.guild.id];    switch (subCommand) {      case 'ekle': {        if (args.length < 3) {          return message.reply('Kullanım: `.biorole ekle <metin> <@rol>`');        }        const roleMention = message.mentions.roles.first();        if (!roleMention) {          return message.reply('Lütfen bir rol etiketleyin.');        }        const text = args.slice(1, -1).join(' ');        if (!text || text.length < 2) {          return message.reply('Lütfen en az 2 karakter uzunluğunda bir metin belirtin.');        }        guildBioRoles[text] = roleMention.id;        await updateConfig(client);        return message.reply(`✅ Biyografide **${text}** metni bulunduğunda <@&${roleMention.id}> rolü verilecek şekilde ayarlandı.`);      }      case 'kaldir': {        if (args.length < 2) {          return message.reply('Kullanım: `.biorole kaldir <metin>`');        }        const text = args.slice(1).join(' ');        if (!guildBioRoles[text]) {          return message.reply(`❌ **${text}** metni için ayarlanmış bir rol bulunamadı.`);        }        const roleId = guildBioRoles[text];        delete guildBioRoles[text];        await updateConfig(client);        return message.reply(`✅ **${text}** metni için <@&${roleId}> rol eşleşmesi kaldırıldı.`);      }      case 'liste': {        const entries = Object.entries(guildBioRoles).filter(([key]) => key !== 'autoRemove');        if (entries.length === 0) {          return message.reply('❌ Bu sunucu için ayarlanmış biyografi-rol eşleşmesi bulunamadı.');        }        const list = entries.map(([text, roleId], index) => {          const role = message.guild.roles.cache.get(roleId);          return `${index + 1}. **${text}** → ${role ? `<@&${roleId}>` : 'Silinmiş Rol'}`;        }).join('\n');        return message.reply(`**Biyografi-Rol Eşleşmeleri:**${list}**Otomatik Rol Kaldırma:** ${guildBioRoles.autoRemove ? 'Açık ✅' : 'Kapalı ❌'}`);      }      case 'otomatikkaldir': {        if (args.length < 2) {          return message.reply('Kullanım: `.biorole otomatikkaldir <açık/kapalı>`');        }        const state = args[1].toLowerCase();        if (state === 'açık' || state === 'aktif' || state === 'on') {          guildBioRoles.autoRemove = true;          await updateConfig(client);          return message.reply('✅ Biyografiden metin kaldırıldığında roller otomatik olarak kaldırılacak.');        } else if (state === 'kapalı' || state === 'kapali' || state === 'off') {          guildBioRoles.autoRemove = false;          await updateConfig(client);          return message.reply('✅ Biyografiden metin kaldırıldığında roller otomatik olarak kaldırılmayacak.');        } else {          return message.reply('❌ Geçersiz parametre. `açık` veya `kapalı` kullanın.');        }      }      default:        return message.reply(`❌ Geçersiz komut. Yardım için \`.biorole\` yazın.`);    }  }};async function updateConfig(client) {  try {    const configPath = './config/config.js';    const configData = fs.readFileSync(configPath, 'utf8');    let updatedConfig;    if (configData.includes('bioRoles:')) {      updatedConfig = configData.replace(        /bioRoles:\s*{[\s\S]*?},/,        `bioRoles: ${JSON.stringify(client.config.bioRoles, null, 2)},`      );    } else {      updatedConfig = configData.replace(        'module.exports = {',        `module.exports = {\n  bioRoles: ${JSON.stringify(client.config.bioRoles, null, 2)},`      );    }    fs.writeFileSync(configPath, updatedConfig);    return true;  } catch (error) {    console.error('Config güncellenirken hata:', error);    return false;  }} 