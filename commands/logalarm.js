const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, ComponentType, PermissionFlagsBits } = require('discord.js');module.exports = {  name: 'logalarm',  description: 'Özel log alarmları ve izleme kuralları oluşturma ve yönetme',  async execute(message, args, client) {    if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {      return message.reply('Bu komutu kullanmak için yönetici yetkisine sahip olmanız gerekiyor.');    }    const subCommand = args[0]?.toLowerCase();    if (!subCommand || subCommand === 'yardım') {      return showHelpMenu(message);    } else if (subCommand === 'oluştur' || subCommand === 'olustur' || subCommand === 'ekle') {      return createNewAlarm(message, args.slice(1), client);    } else if (subCommand === 'liste' || subCommand === 'alarmlar') {      return listAlarms(message, client);    } else if (subCommand === 'sil' || subCommand === 'kaldır' || subCommand === 'kaldir') {      return removeAlarm(message, args.slice(1), client);    } else if (subCommand === 'kullanıcı' || subCommand === 'kullanici' || subCommand === 'izle') {      return trackUser(message, args.slice(1), client);    } else if (subCommand === 'izlemeler') {      return listTrackedUsers(message, client);    } else if (subCommand === 'izlemekaldır' || subCommand === 'izlekaldir') {      return removeUserTracker(message, args.slice(1), client);    } else {      return message.reply('❌ Geçersiz alt komut. Yardım için `.logalarm yardım` yazın.');    }  }};async function showHelpMenu(message) {  const embed = new EmbedBuilder()    .setTitle('📢 Log Alarm Sistemi')    .setDescription('Log kayıtları için gelişmiş izleme ve alarm sistemi. Belirli durumlarda bildirimler alın, kullanıcıları izleyin ve otomatik tepkiler oluşturun.')    .setColor('#5865F2')    .addFields(      {        name: '⚠️ Alarm Yönetimi',        value: '`.logalarm oluştur` - Yeni bir log alarmı oluşturur\n'          + '`.logalarm liste` - Mevcut alarmları listeler\n'          + '`.logalarm sil <alarm-id>` - Belirtilen alarmı kaldırır',        inline: false      },      {        name: '👁️ Kullanıcı İzleme',        value: '`.logalarm kullanıcı <@kullanıcı>` - Belirli bir kullanıcıyı izlemeye alır\n'          + '`.logalarm izlemeler` - İzlenen kullanıcıları listeler\n'          + '`.logalarm izlekaldir <@kullanıcı>` - Kullanıcı izlemeyi kaldırır',        inline: false      },      {        name: '📋 Alarm Türleri',        value: '- Belirli bir kullanıcının tüm hareketleri\n'          + '- Küfür/yasaklı kelime kullanımı\n'          + '- Yönetici yetkisi alınması/verilmesi\n'          + '- Belirli kanal/kategori izinlerinin değiştirilmesi\n'          + '- Hızlı mesaj silme işlemleri\n'          + '- Webhook oluşturma/düzenleme işlemleri\n'          + '- Toplu üye hareketleri',        inline: false      }    )    .setFooter({ text: 'Discord Logger - Gelişmiş Alarm Sistemi' });  return message.reply({ embeds: [embed] });}async function createNewAlarm(message, args, client) {  const alarmTypes = [    { value: 'user_action', label: '👤 Kullanıcı Eylemi', description: 'Belirli bir kullanıcının herhangi bir eylemi' },    { value: 'message_content', label: '📝 Mesaj İçeriği', description: 'Belirli kelime veya ifadeler içeren mesajlar' },    { value: 'role_change', label: '👑 Rol Değişimi', description: 'Belirli rollerle ilgili değişiklikler' },    { value: 'permission_change', label: '🔒 İzin Değişiklikleri', description: 'Kanal veya rol izinlerinde değişiklikler' },    { value: 'bulk_action', label: '🗑️ Toplu İşlemler', description: 'Toplu mesaj silme, toplu üye atma gibi işlemler' },    { value: 'webhook_action', label: '🔌 Webhook İşlemleri', description: 'Webhook oluşturma, düzenleme, silme işlemleri' }  ];  const notificationTypes = [    { value: 'channel', label: '📢 Kanal Bildirimi', description: 'Belirli bir kanala bildirim gönderir' },    { value: 'dm', label: '✉️ Özel Mesaj', description: 'Belirtilen kullanıcılara özel mesaj gönderir' },    { value: 'auto_action', label: '⚡ Otomatik Tepki', description: 'Ban, kick, rol verme gibi otomatik tepkiler' }  ];  const alarmTypeMenu = new StringSelectMenuBuilder()    .setCustomId('alarm_type')    .setPlaceholder('Alarm türünü seçin')    .addOptions(alarmTypes.map(type =>       new StringSelectMenuOptionBuilder()        .setLabel(type.label)        .setValue(type.value)        .setDescription(type.description)    ));  const row = new ActionRowBuilder().addComponents(alarmTypeMenu);  const initialEmbed = new EmbedBuilder()    .setTitle('🚨 Yeni Log Alarmı Oluştur')    .setDescription('Log sisteminiz için yeni bir alarm oluşturmak üzeresiniz. Bu alarm, belirli durumlarda bildirim almanıza veya otomatik tepkiler oluşturmanıza yardımcı olacaktır.\n\nLütfen alarm türünü seçin:')    .setColor('#5865F2')    .setFooter({ text: 'İptal etmek için mesaja 30 saniye boyunca tepki vermeyin' });  const response = await message.reply({    embeds: [initialEmbed],    components: [row]  });  const collector = response.createMessageComponentCollector({    componentType: ComponentType.StringSelect,    time: 30000   });  collector.on('collect', async (interaction) => {    if (interaction.user.id !== message.author.id) {      return interaction.reply({        content: '❌ Bu menüyü sadece komutu çalıştıran kişi kullanabilir!',        ephemeral: true      });    }    collector.resetTimer();    const selectedAlarmType = interaction.values[0];    await showAlarmModal(interaction, selectedAlarmType, client, message);  });  collector.on('end', async (collected, reason) => {    if (reason === 'time' && collected.size === 0) {      await response.edit({        content: '⏱️ Zaman aşımı: Alarm oluşturma işlemi iptal edildi.',        embeds: [],        components: []      }).catch(() => {});    }  });}async function showAlarmModal(interaction, alarmType, client, message) {  const modal = new ModalBuilder()    .setCustomId(`alarm_modal_${alarmType}`)    .setTitle('Log Alarmı Oluştur');  if (alarmType === 'user_action') {    modal.addComponents(      new ActionRowBuilder().addComponents(        new TextInputBuilder()          .setCustomId('user_id')          .setLabel('Kullanıcı ID')          .setPlaceholder('İzlenecek kullanıcının ID\'sini yazın')          .setStyle(TextInputStyle.Short)          .setRequired(true)      ),      new ActionRowBuilder().addComponents(        new TextInputBuilder()          .setCustomId('action_type')          .setLabel('İşlem Türü')          .setPlaceholder('mesaj, ses, rol değişikliği vb. (boş bırakılabilir)')          .setStyle(TextInputStyle.Short)          .setRequired(false)      ),      new ActionRowBuilder().addComponents(        new TextInputBuilder()          .setCustomId('notify_channel')          .setLabel('Bildirim Kanalı ID')          .setPlaceholder('Bildirimlerin gönderileceği kanal ID')          .setStyle(TextInputStyle.Short)          .setRequired(true)      ),      new ActionRowBuilder().addComponents(        new TextInputBuilder()          .setCustomId('alarm_title')          .setLabel('Alarm Başlığı')          .setPlaceholder('Alarm bildiriminde görünecek başlık')          .setStyle(TextInputStyle.Short)          .setRequired(true)      ),      new ActionRowBuilder().addComponents(        new TextInputBuilder()          .setCustomId('alarm_description')          .setLabel('Alarm Açıklaması')          .setPlaceholder('Alarm bildiriminde görünecek açıklama')          .setStyle(TextInputStyle.Paragraph)          .setRequired(false)      )    );  } else if (alarmType === 'message_content') {    modal.addComponents(      new ActionRowBuilder().addComponents(        new TextInputBuilder()          .setCustomId('content_pattern')          .setLabel('Aranacak İçerik')          .setPlaceholder('Mesajlarda aranacak kelime veya ifade')          .setStyle(TextInputStyle.Paragraph)          .setRequired(true)      ),      new ActionRowBuilder().addComponents(        new TextInputBuilder()          .setCustomId('notify_channel')          .setLabel('Bildirim Kanalı ID')          .setPlaceholder('Bildirimlerin gönderileceği kanal ID')          .setStyle(TextInputStyle.Short)          .setRequired(true)      ),      new ActionRowBuilder().addComponents(        new TextInputBuilder()          .setCustomId('alarm_title')          .setLabel('Alarm Başlığı')          .setPlaceholder('Alarm bildiriminde görünecek başlık')          .setStyle(TextInputStyle.Short)          .setRequired(true)      ),      new ActionRowBuilder().addComponents(        new TextInputBuilder()          .setCustomId('alarm_description')          .setLabel('Alarm Açıklaması')          .setPlaceholder('Alarm bildiriminde görünecek açıklama')          .setStyle(TextInputStyle.Paragraph)          .setRequired(false)      ),      new ActionRowBuilder().addComponents(        new TextInputBuilder()          .setCustomId('auto_action')          .setLabel('Otomatik İşlem')          .setPlaceholder('delete - silme, warn - uyarı, none - işlem yok')          .setStyle(TextInputStyle.Short)          .setRequired(false)      )    );  } else if (alarmType === 'role_change') {    modal.addComponents(      new ActionRowBuilder().addComponents(        new TextInputBuilder()          .setCustomId('role_id')          .setLabel('Rol ID')          .setPlaceholder('İzlenecek rolün ID\'sini yazın')          .setStyle(TextInputStyle.Short)          .setRequired(true)      ),      new ActionRowBuilder().addComponents(        new TextInputBuilder()          .setCustomId('change_type')          .setLabel('Değişiklik Türü')          .setPlaceholder('add, remove, update, permission (boş=tümü)')          .setStyle(TextInputStyle.Short)          .setRequired(false)      ),      new ActionRowBuilder().addComponents(        new TextInputBuilder()          .setCustomId('notify_channel')          .setLabel('Bildirim Kanalı ID')          .setPlaceholder('Bildirimlerin gönderileceği kanal ID')          .setStyle(TextInputStyle.Short)          .setRequired(true)      ),      new ActionRowBuilder().addComponents(        new TextInputBuilder()          .setCustomId('alarm_title')          .setLabel('Alarm Başlığı')          .setPlaceholder('Alarm bildiriminde görünecek başlık')          .setStyle(TextInputStyle.Short)          .setRequired(true)      ),      new ActionRowBuilder().addComponents(        new TextInputBuilder()          .setCustomId('alarm_description')          .setLabel('Alarm Açıklaması')          .setPlaceholder('Alarm bildiriminde görünecek açıklama')          .setStyle(TextInputStyle.Paragraph)          .setRequired(false)      )    );  }  await interaction.showModal(modal);  try {    const modalResponse = await interaction.awaitModalSubmit({      time: 120000,       filter: i => i.customId.startsWith(`alarm_modal_`) && i.user.id === interaction.user.id    });    const alarmData = {};    if (alarmType === 'user_action') {      alarmData.userId = modalResponse.fields.getTextInputValue('user_id');      alarmData.actionType = modalResponse.fields.getTextInputValue('action_type');      const notifyChannelId = modalResponse.fields.getTextInputValue('notify_channel');      const alarmTitle = modalResponse.fields.getTextInputValue('alarm_title');      const alarmDescription = modalResponse.fields.getTextInputValue('alarm_description');      const pattern = {        logType: alarmData.actionType || null,        userId: alarmData.userId      };      const action = {        notifyChannelId,        title: alarmTitle,        description: alarmDescription,        color: '#FF5555'      };      const alarmId = client.logger.addAlarmPattern(pattern, action);      modalResponse.reply({        content: `✅ Kullanıcı eylemi alarmı başarıyla oluşturuldu!\nAlarm ID: \`${alarmId}\`\nİzlenen Kullanıcı: <@${alarmData.userId}>\nBildirim Kanalı: <#${notifyChannelId}>`,        ephemeral: true      });    } else if (alarmType === 'message_content') {      const contentPattern = modalResponse.fields.getTextInputValue('content_pattern');      const notifyChannelId = modalResponse.fields.getTextInputValue('notify_channel');      const alarmTitle = modalResponse.fields.getTextInputValue('alarm_title');      const alarmDescription = modalResponse.fields.getTextInputValue('alarm_description');      const autoAction = modalResponse.fields.getTextInputValue('auto_action');      const pattern = {        logType: 'message',        content: contentPattern      };      const action = {        notifyChannelId,        title: alarmTitle,        description: alarmDescription,        color: '#FF5555',        autoActions: []      };      if (autoAction === 'delete') {        action.autoActions.push({          type: 'DELETE_MESSAGES',          amount: 1,          reason: 'Yasaklı içerik algılandı'        });      }      const alarmId = client.logger.addAlarmPattern(pattern, action);      modalResponse.reply({        content: `✅ Mesaj içeriği alarmı başarıyla oluşturuldu!\nAlarm ID: \`${alarmId}\`\nAranan İçerik: \`${contentPattern}\`\nBildirim Kanalı: <#${notifyChannelId}>${autoAction ? `\nOtomatik İşlem: \`${autoAction}\`` : ''}`,        ephemeral: true      });    } else if (alarmType === 'role_change') {      const roleId = modalResponse.fields.getTextInputValue('role_id');      const changeType = modalResponse.fields.getTextInputValue('change_type');      const notifyChannelId = modalResponse.fields.getTextInputValue('notify_channel');      const alarmTitle = modalResponse.fields.getTextInputValue('alarm_title');      const alarmDescription = modalResponse.fields.getTextInputValue('alarm_description');      const pattern = {        logType: 'role',        roleId: roleId,        action: changeType || null      };      const action = {        notifyChannelId,        title: alarmTitle,        description: alarmDescription,        color: '#FF5555'      };      const alarmId = client.logger.addAlarmPattern(pattern, action);      modalResponse.reply({        content: `✅ Rol değişikliği alarmı başarıyla oluşturuldu!\nAlarm ID: \`${alarmId}\`\nİzlenen Rol: <@&${roleId}>\nDeğişiklik Türü: ${changeType || 'Tümü'}\nBildirim Kanalı: <#${notifyChannelId}>`,        ephemeral: true      });    }    await message.channel.messages.fetch(interaction.message.id)      .then(msg => {        msg.edit({          content: '✅ Alarm başarıyla oluşturuldu! Detaylar özel mesaj olarak gönderildi.',          embeds: [],          components: []        });      })      .catch(() => {});  } catch (error) {    console.error('Modal yanıt hatası:', error);    if (error.code === 'INTERACTION_COLLECTOR_ERROR') {      await message.channel.messages.fetch(interaction.message.id)        .then(msg => {          msg.edit({            content: '⏱️ Zaman aşımı: Alarm oluşturma işlemi iptal edildi.',            embeds: [],            components: []          });        })        .catch(() => {});    }  }}async function listAlarms(message, client) {  if (!client.logger.alarmPatterns || client.logger.alarmPatterns.size === 0) {    return message.reply('❌ Henüz hiç alarm oluşturulmamış.');  }  const alarms = Array.from(client.logger.alarmPatterns.entries());  const itemsPerPage = 5;  const totalPages = Math.ceil(alarms.length / itemsPerPage);  let currentPage = 0;  const createPageContent = (page) => {    const startIdx = page * itemsPerPage;    const endIdx = Math.min(startIdx + itemsPerPage, alarms.length);    const pageAlarms = alarms.slice(startIdx, endIdx);    const embed = new EmbedBuilder()      .setTitle('🚨 Log Alarmları')      .setDescription(`Sunucunuzda yapılandırılmış **${alarms.length}** alarm bulunmaktadır.`)      .setColor('#5865F2')      .setFooter({ text: `Sayfa ${page + 1}/${totalPages} • Toplam ${alarms.length} alarm` })      .setTimestamp();    pageAlarms.forEach(([alarmId, alarm], index) => {      const { pattern, action, enabled, created } = alarm;      let alarmType = '🔍 Genel Alarm';      if (pattern.userId) alarmType = '👤 Kullanıcı Eylemi';      else if (pattern.content) alarmType = '📝 Mesaj İçeriği';      else if (pattern.roleId) alarmType = '👑 Rol Değişikliği';      else if (pattern.channelId) alarmType = '📢 Kanal İşlemi';      let summaryInfo = '';      if (pattern.userId) {        summaryInfo += `Kullanıcı: <@${pattern.userId}>\n`;      }      if (pattern.logType) {        summaryInfo += `Log Türü: \`${pattern.logType}\`\n`;      }      if (pattern.content) {        summaryInfo += `İçerik: \`${pattern.content}\`\n`;      }      if (pattern.roleId) {        summaryInfo += `Rol: <@&${pattern.roleId}>\n`;      }      if (pattern.channelId) {        summaryInfo += `Kanal: <#${pattern.channelId}>\n`;      }      if (action.notifyChannelId) {        summaryInfo += `Bildirim Kanalı: <#${action.notifyChannelId}>\n`;      }      if (action.notifyUserIds && action.notifyUserIds.length > 0) {        summaryInfo += `DM Bildirimleri: ${action.notifyUserIds.map(id => `<@${id}>`).join(', ')}\n`;      }      embed.addFields({        name: `${enabled ? '✅' : '❌'} ${alarmType} (ID: ${alarmId.substring(0, 8)}...)`,        value: summaryInfo + `Oluşturulma: <t:${Math.floor(new Date(created).getTime() / 1000)}:R>`,        inline: false      });    });    return embed;  };  const createButtons = () => {    return new ActionRowBuilder()      .addComponents(        new ButtonBuilder()          .setCustomId('prev_page')          .setLabel('◀️ Önceki')          .setStyle(ButtonStyle.Secondary)          .setDisabled(currentPage === 0),        new ButtonBuilder()          .setCustomId('next_page')          .setLabel('Sonraki ▶️')          .setStyle(ButtonStyle.Secondary)          .setDisabled(currentPage === totalPages - 1),        new ButtonBuilder()          .setCustomId('delete_alarm')          .setLabel('🗑️ Alarm Sil')          .setStyle(ButtonStyle.Danger)      );  };  const response = await message.reply({    embeds: [createPageContent(currentPage)],    components: [createButtons()]  });  const collector = response.createMessageComponentCollector({    componentType: ComponentType.Button,    time: 60000   });  collector.on('collect', async (interaction) => {    if (interaction.user.id !== message.author.id) {      return interaction.reply({        content: '❌ Bu menüyü sadece komutu çalıştıran kişi kullanabilir!',        ephemeral: true      });    }    collector.resetTimer();    if (interaction.customId === 'prev_page') {      currentPage = Math.max(0, currentPage - 1);      await interaction.update({        embeds: [createPageContent(currentPage)],        components: [createButtons()]      });    }    else if (interaction.customId === 'next_page') {      currentPage = Math.min(totalPages - 1, currentPage + 1);      await interaction.update({        embeds: [createPageContent(currentPage)],        components: [createButtons()]      });    }    else if (interaction.customId === 'delete_alarm') {      const modal = new ModalBuilder()        .setCustomId('delete_alarm_modal')        .setTitle('Alarm Silme');      modal.addComponents(        new ActionRowBuilder().addComponents(          new TextInputBuilder()            .setCustomId('alarm_id')            .setLabel('Alarm ID')            .setPlaceholder('Silinecek alarmın ID\'sini yazın')            .setStyle(TextInputStyle.Short)            .setRequired(true)        )      );      await interaction.showModal(modal);      try {        const modalResponse = await interaction.awaitModalSubmit({          time: 60000,           filter: i => i.customId === 'delete_alarm_modal' && i.user.id === interaction.user.id        });        const alarmId = modalResponse.fields.getTextInputValue('alarm_id');        const found = Array.from(client.logger.alarmPatterns.keys()).find(id => id.startsWith(alarmId));        if (found) {          client.logger.alarmPatterns.delete(found);          modalResponse.reply({            content: `✅ Alarm başarıyla silindi: \`${found}\``,            ephemeral: true          });          const updatedAlarms = Array.from(client.logger.alarmPatterns.entries());          const updatedTotalPages = Math.ceil(updatedAlarms.length / itemsPerPage);          currentPage = Math.min(currentPage, updatedTotalPages - 1);          if (updatedAlarms.length === 0) {            await response.edit({              content: '❌ Tüm alarmlar silindi.',              embeds: [],              components: []            });            collector.stop();          } else {            const createUpdatedPageContent = (page) => {              const startIdx = page * itemsPerPage;              const endIdx = Math.min(startIdx + itemsPerPage, updatedAlarms.length);              const pageAlarms = updatedAlarms.slice(startIdx, endIdx);              const embed = new EmbedBuilder()                .setTitle('🚨 Log Alarmları')                .setDescription(`Sunucunuzda yapılandırılmış **${updatedAlarms.length}** alarm bulunmaktadır.`)                .setColor('#5865F2')                .setFooter({ text: `Sayfa ${page + 1}/${updatedTotalPages} • Toplam ${updatedAlarms.length} alarm` })                .setTimestamp();              pageAlarms.forEach(([alarmId, alarm], index) => {              });              return embed;            };            await response.edit({              embeds: [createUpdatedPageContent(currentPage)],              components: [createButtons()]            });          }        } else {          modalResponse.reply({            content: `❌ \`${alarmId}\` ID'sine sahip bir alarm bulunamadı.`,            ephemeral: true          });        }      } catch (error) {        console.error('Modal yanıt hatası:', error);      }    }  });  collector.on('end', async () => {    const disabledButtons = new ActionRowBuilder()      .addComponents(        new ButtonBuilder()          .setCustomId('prev_page')          .setLabel('◀️ Önceki')          .setStyle(ButtonStyle.Secondary)          .setDisabled(true),        new ButtonBuilder()          .setCustomId('next_page')          .setLabel('Sonraki ▶️')          .setStyle(ButtonStyle.Secondary)          .setDisabled(true),        new ButtonBuilder()          .setCustomId('delete_alarm')          .setLabel('🗑️ Alarm Sil')          .setStyle(ButtonStyle.Danger)          .setDisabled(true)      );    await response.edit({ components: [disabledButtons] }).catch(() => {});  });}async function removeAlarm(message, args, client) {  if (!args[0]) {    return message.reply('❌ Silinecek alarmın ID\'sini belirtmelisiniz. Alarmları listelemek için `.logalarm liste` komutunu kullanın.');  }  const alarmId = args[0];  const found = Array.from(client.logger.alarmPatterns.keys()).find(id => id.startsWith(alarmId));  if (found) {    client.logger.alarmPatterns.delete(found);    return message.reply(`✅ Alarm başarıyla silindi: \`${found}\``);  } else {    return message.reply(`❌ \`${alarmId}\` ID'sine sahip bir alarm bulunamadı.`);  }}async function trackUser(message, args, client) {  const user = message.mentions.users.first() || client.users.cache.get(args[0]);  if (!user) {    return message.reply('❌ İzlenecek kullanıcıyı etiketleyin veya ID\'sini yazın.');  }  let notifyChannelId = message.channel.id;  if (args[1]) {    const mentionedChannel = message.mentions.channels.first();    if (mentionedChannel) {      notifyChannelId = mentionedChannel.id;    } else if (args[1].match(/^\d+$/)) {      notifyChannelId = args[1];    }  }  const reason = args.slice(mentionedChannel ? 2 : 1).join(' ') || 'Güvenlik izlemesi';  const result = client.logger.addUserTracker(user.id, {    notifyChannel: notifyChannelId,    reason: reason,    trackMessages: true,    trackVoice: true,    trackMember: true  });  if (result) {    return message.reply(`✅ <@${user.id}> kullanıcısı izlemeye alındı. Bildirimler <#${notifyChannelId}> kanalına gönderilecek.\nNeden: ${reason}`);  } else {    return message.reply('❌ Kullanıcı izleme eklenirken bir hata oluştu.');  }}async function listTrackedUsers(message, client) {  if (!client.logger.userTracker || client.logger.userTracker.size === 0) {    return message.reply('❌ Henüz hiç kullanıcı izlemeye alınmamış.');  }  const trackedUsers = Array.from(client.logger.userTracker.entries());  const embed = new EmbedBuilder()    .setTitle('👁️ İzlenen Kullanıcılar')    .setDescription(`Sunucunuzda **${trackedUsers.length}** kullanıcı izleniyor.`)    .setColor('#FF5555')    .setTimestamp();  trackedUsers.forEach(([userId, tracker]) => {    embed.addFields({      name: `${tracker.enabled ? '🔴' : '⚪'} <@${userId}>`,      value: `Başlangıç: <t:${Math.floor(new Date(tracker.startedAt).getTime() / 1000)}:R>\nNeden: ${tracker.reason}\nİzlenenler: ${tracker.trackMessages ? '📝' : ''} ${tracker.trackVoice ? '🔊' : ''} ${tracker.trackMember ? '👤' : ''}\nKayıt Sayısı: ${tracker.logs.length}`,      inline: true    });  });  return message.reply({ embeds: [embed] });}async function removeUserTracker(message, args, client) {  const user = message.mentions.users.first() || client.users.cache.get(args[0]);  if (!user) {    return message.reply('❌ İzlemesi kaldırılacak kullanıcıyı etiketleyin veya ID\'sini yazın.');  }  const result = client.logger.removeUserTracker(user.id);  if (result) {    return message.reply(`✅ <@${user.id}> kullanıcısının izlemesi kaldırıldı.`);  } else {    return message.reply(`❌ <@${user.id}> kullanıcısı zaten izlenmiyor.`);  }} 