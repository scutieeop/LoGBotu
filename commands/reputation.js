const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionFlagsBits } = require('discord.js');module.exports = {  name: 'reputation',  aliases: ['rep', 'itibar', 'güven'],  description: 'Kullanıcı itibar sistemini görüntüle ve yönet',  usage: '.reputation [user] [history/warn/reset]',  category: 'moderation',  async execute(message, args, client) {    const startTime = Date.now();    if (!client.userReputation) {      client.userReputation = new (require('../utils/userReputation'))(client);    }    let subcommand = null;    let targetUser = null;    if (args.length >= 1) {      const possibleSubcommands = ['history', 'warn', 'reset', 'top', 'bottom'];      if (possibleSubcommands.includes(args[0].toLowerCase())) {        subcommand = args[0].toLowerCase();      } else {        targetUser = args[0].replace(/[<@!>]/g, '');      }      if (args.length >= 2 && !possibleSubcommands.includes(args[0].toLowerCase())) {        subcommand = args[1].toLowerCase();      }    }    if (!targetUser) {      targetUser = message.author.id;    }    try {      if (subcommand === 'top') {        return this.showTopUsers(message, client);      } else if (subcommand === 'bottom') {        return this.showBottomUsers(message, client);      } else if (subcommand === 'history') {        return this.showHistory(message, targetUser, client);      } else if (subcommand === 'warn') {        if (!message.member.permissions.has(PermissionFlagsBits.ModerateMembers)) {          return message.reply('Bu komutu kullanma yetkiniz yok!');        }        const reason = args.slice(2).join(' ') || 'Sebep belirtilmedi';        return this.warnUser(message, targetUser, reason, client);      } else if (subcommand === 'reset') {        if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {          return message.reply('Bu komutu kullanma yetkiniz yok!');        }        return this.resetReputation(message, targetUser, client);      } else {        return this.showReputation(message, targetUser, client);      }    } catch (error) {      console.error('Error executing reputation command:', error);      if (client.customLogs) {        client.customLogs.logError(error, 'reputation command', message.author.id, message.guild.id);      }      return message.reply('İtibar bilgileri görüntülenirken bir hata oluştu.');    } finally {      const processingTime = Date.now() - startTime;      if (client.customLogs) {        client.customLogs.logCommand(          'reputation',          message.author.id,          message.guild.id,          true,          processingTime,          null        );      }    }  },  async showReputation(message, targetUserId, client) {    try {      const user = await client.users.fetch(targetUserId).catch(() => null);      if (!user) {        return message.reply('Kullanıcı bulunamadı.');      }      const embed = await client.userReputation.createReputationEmbed(user.id, message.guild.id);      if (!embed) {        return message.reply('İtibar bilgileri oluşturulamadı.');      }      const row = new ActionRowBuilder().addComponents(        new ButtonBuilder()          .setCustomId(`rep_history_${message.author.id}_${user.id}`)          .setLabel('📜 Geçmiş')          .setStyle(ButtonStyle.Secondary),        new ButtonBuilder()          .setCustomId(`rep_warnings_${message.author.id}_${user.id}`)          .setLabel('⚠️ Uyarılar')          .setStyle(ButtonStyle.Secondary)      );      if (message.member.permissions.has(PermissionFlagsBits.ModerateMembers)) {        row.addComponents(          new ButtonBuilder()            .setCustomId(`rep_warn_${message.author.id}_${user.id}`)            .setLabel('📝 Uyarı Ver')            .setStyle(ButtonStyle.Primary)        );      }      if (message.member.permissions.has(PermissionFlagsBits.Administrator)) {        row.addComponents(          new ButtonBuilder()            .setCustomId(`rep_reset_${message.author.id}_${user.id}`)            .setLabel('🗑️ Sıfırla')            .setStyle(ButtonStyle.Danger)        );      }      const reply = await message.reply({        embeds: [embed],        components: [row]      });      const filter = i => i.customId.startsWith('rep_') && i.customId.includes(message.author.id);      const collector = reply.createMessageComponentCollector({ filter, time: 300000 });      collector.on('collect', async (interaction) => {        await interaction.deferUpdate();        if (interaction.customId === `rep_history_${message.author.id}_${user.id}`) {          const historyEmbed = await this.createHistoryEmbed(user, message.guild.id, client);          await interaction.followUp({ embeds: [historyEmbed], ephemeral: true });        } else if (interaction.customId === `rep_warnings_${message.author.id}_${user.id}`) {          const warningsEmbed = await this.createWarningsEmbed(user, message.guild.id, client);          await interaction.followUp({ embeds: [warningsEmbed], ephemeral: true });        } else if (interaction.customId === `rep_warn_${message.author.id}_${user.id}`) {          await interaction.followUp({            content: 'Uyarı sebebini yazın:',            ephemeral: true          });          const filter = m => m.author.id === message.author.id;          const collector = message.channel.createMessageCollector({ filter, time: 60000, max: 1 });          collector.on('collect', async collected => {            const reason = collected.content;            collected.delete().catch(() => {});            await this.warnUser(message, user.id, reason, client, true);            const newEmbed = await client.userReputation.createReputationEmbed(user.id, message.guild.id);            await reply.edit({ embeds: [newEmbed] });            await interaction.followUp({              content: `${user.tag} kullanıcısına başarıyla uyarı verildi.`,              ephemeral: true            });          });        } else if (interaction.customId === `rep_reset_${message.author.id}_${user.id}`) {          await this.resetReputation(message, user.id, client, true);          const newEmbed = await client.userReputation.createReputationEmbed(user.id, message.guild.id);          await reply.edit({ embeds: [newEmbed] });          await interaction.followUp({            content: `${user.tag} kullanıcısının itibar puanı sıfırlandı.`,            ephemeral: true          });        }      });      collector.on('end', () => {        reply.edit({ components: [] }).catch(() => {});      });    } catch (error) {      console.error('Error showing reputation:', error);      return message.reply('İtibar bilgileri görüntülenirken bir hata oluştu.');    }  },  async showHistory(message, targetUserId, client) {    try {      const user = await client.users.fetch(targetUserId).catch(() => null);      if (!user) {        return message.reply('Kullanıcı bulunamadı.');      }      const historyEmbed = await this.createHistoryEmbed(user, message.guild.id, client);      return message.reply({ embeds: [historyEmbed] });    } catch (error) {      console.error('Error showing history:', error);      return message.reply('İtibar geçmişi görüntülenirken bir hata oluştu.');    }  },  async createHistoryEmbed(user, guildId, client) {    const userData = client.userReputation.getUserReputation(user.id, guildId);    const historyEmbed = new EmbedBuilder()      .setTitle(`📜 İtibar Geçmişi: ${user.tag}`)      .setDescription(`<@${user.id}> kullanıcısının son 10 itibar değişikliği`)      .setColor('#5865F2')      .setTimestamp()      .setFooter({ text: 'Kullanıcı İtibar Sistemi' });    if (user.displayAvatarURL()) {      historyEmbed.setThumbnail(user.displayAvatarURL({ dynamic: true }));    }    const recentHistory = userData.history      .slice(-10)      .reverse();    if (recentHistory.length === 0) {      historyEmbed.addFields({ name: 'Geçmiş Bulunamadı', value: 'Henüz itibar değişikliği kaydedilmemiş.' });    } else {      recentHistory.forEach((entry, index) => {        const date = new Date(entry.timestamp);        const formattedDate = `<t:${Math.floor(date.getTime() / 1000)}:f>`;        historyEmbed.addFields({          name: `#${index + 1} - ${formattedDate}`,          value: `**İşlem:** ${entry.actionType}\n**Değişim:** ${entry.change > 0 ? '+' : ''}${entry.change.toFixed(1)} puan\n**Sonuç:** ${entry.oldScore.toFixed(1)} → ${entry.newScore.toFixed(1)}\n**Sebep:** ${entry.reason}`        });      });    }    return historyEmbed;  },  async createWarningsEmbed(user, guildId, client) {    const warnings = client.userReputation.getUserWarnings(user.id, guildId);    const warningsEmbed = new EmbedBuilder()      .setTitle(`⚠️ Uyarı Geçmişi: ${user.tag}`)      .setDescription(`<@${user.id}> kullanıcısının uyarı geçmişi`)      .setColor('#FFA500')      .setTimestamp()      .setFooter({ text: 'Kullanıcı İtibar Sistemi' });    if (user.displayAvatarURL()) {      warningsEmbed.setThumbnail(user.displayAvatarURL({ dynamic: true }));    }    if (warnings.length === 0) {      warningsEmbed.addFields({ name: 'Uyarı Bulunamadı', value: 'Henüz uyarı kaydedilmemiş.' });    } else {      const activeWarnings = warnings.filter(w => w.active);      const inactiveWarnings = warnings.filter(w => !w.active);      warningsEmbed.addFields({        name: 'Uyarı Durumu',        value: `**Aktif Uyarılar:** ${activeWarnings.length}\n**Geçmiş Uyarılar:** ${inactiveWarnings.length}`,        inline: false      });      if (activeWarnings.length > 0) {        const activeWarningsText = activeWarnings          .slice(0, 5)          .map((warning, index) => {            const date = new Date(warning.timestamp);            const formattedDate = `<t:${Math.floor(date.getTime() / 1000)}:f>`;            return `**#${index + 1}** - ${formattedDate}\n📝 **Sebep:** ${warning.reason}\n👮 **Moderatör:** <@${warning.moderatorId}>`;          })          .join('\n\n');        warningsEmbed.addFields({          name: '🔴 Aktif Uyarılar',          value: activeWarningsText || 'Aktif uyarı bulunamadı.',          inline: false        });      }      if (inactiveWarnings.length > 0) {        const inactiveWarningsText = inactiveWarnings          .slice(0, 3)          .map((warning, index) => {            const date = new Date(warning.timestamp);            const formattedDate = `<t:${Math.floor(date.getTime() / 1000)}:f>`;            return `**#${index + 1}** - ${formattedDate}\n📝 **Sebep:** ${warning.reason}`;          })          .join('\n\n');        warningsEmbed.addFields({          name: '⚫ Geçmiş Uyarılar',          value: inactiveWarningsText || 'Geçmiş uyarı bulunamadı.',          inline: false        });      }    }    return warningsEmbed;  },  async warnUser(message, targetUserId, reason, client, silent = false) {    try {      const user = await client.users.fetch(targetUserId).catch(() => null);      if (!user) {        return message.reply('Kullanıcı bulunamadı.');      }      if (!message.member.permissions.has(PermissionFlagsBits.ModerateMembers)) {        return message.reply('Bu komutu kullanma yetkiniz yok!');      }      const warningId = client.userReputation.addUserWarning(        user.id,        message.guild.id,        message.author.id,        reason      );      await client.userReputation.checkUserReputation(user.id, message.guild.id);      const member = await message.guild.members.fetch(user.id).catch(() => null);      if (member) {        try {          await member.send(`**${message.guild.name}** sunucusunda uyarı aldınız!\n📝 **Sebep:** ${reason}\n👮 **Moderatör:** ${message.author.tag}`);        } catch (error) {          console.log(`Could not DM user ${user.tag} about warning.`);        }      }      if (!silent) {        const embed = new EmbedBuilder()          .setTitle('⚠️ Kullanıcı Uyarıldı')          .setDescription(`<@${user.id}> kullanıcısı başarıyla uyarıldı.`)          .setColor('#FFA500')          .addFields(            { name: 'Kullanıcı', value: `${user.tag} (${user.id})`, inline: true },            { name: 'Moderatör', value: `${message.author.tag} (${message.author.id})`, inline: true },            { name: 'Sebep', value: reason, inline: false },            { name: 'Uyarı ID', value: warningId.substring(0, 8), inline: true }          )          .setTimestamp()          .setFooter({ text: 'Kullanıcı İtibar Sistemi' });        if (user.displayAvatarURL()) {          embed.setThumbnail(user.displayAvatarURL({ dynamic: true }));        }        return message.reply({ embeds: [embed] });      }      return true;    } catch (error) {      console.error('Error warning user:', error);      return message.reply('Kullanıcı uyarılırken bir hata oluştu.');    }  },  async resetReputation(message, targetUserId, client, silent = false) {    try {      const user = await client.users.fetch(targetUserId).catch(() => null);      if (!user) {        return message.reply('Kullanıcı bulunamadı.');      }      if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {        return message.reply('Bu komutu kullanma yetkiniz yok!');      }      const userData = client.userReputation.getUserReputation(user.id, message.guild.id);      const oldScore = userData.score;      await client.userReputation.updateReputation(        user.id,        message.guild.id,        'ADMIN_RESET',        -oldScore,        `İtibar sıfırlandı (${message.author.tag} tarafından)`      );      if (!silent) {        const embed = new EmbedBuilder()          .setTitle('🗑️ İtibar Sıfırlandı')          .setDescription(`<@${user.id}> kullanıcısının itibar puanı sıfırlandı.`)          .setColor('#5865F2')          .addFields(            { name: 'Kullanıcı', value: `${user.tag} (${user.id})`, inline: true },            { name: 'Yönetici', value: `${message.author.tag} (${message.author.id})`, inline: true },            { name: 'Eski Puan', value: oldScore.toFixed(2), inline: true }          )          .setTimestamp()          .setFooter({ text: 'Kullanıcı İtibar Sistemi' });        if (user.displayAvatarURL()) {          embed.setThumbnail(user.displayAvatarURL({ dynamic: true }));        }        return message.reply({ embeds: [embed] });      }      return true;    } catch (error) {      console.error('Error resetting reputation:', error);      return message.reply('İtibar sıfırlanırken bir hata oluştu.');    }  },  async showTopUsers(message, client) {    try {      const topUsers = client.userReputation.getTopUsers(message.guild.id, 10);      const embed = new EmbedBuilder()        .setTitle('🏆 İtibar Sıralaması - En Yüksek')        .setDescription(`${message.guild.name} sunucusundaki en yüksek itibar puanına sahip kullanıcılar`)        .setColor('#5865F2')        .setTimestamp()        .setFooter({ text: 'Kullanıcı İtibar Sistemi' });      if (topUsers.length === 0) {        embed.addFields({ name: 'Veri Bulunamadı', value: 'Henüz yeterli itibar verisi bulunmamaktadır.' });      } else {        let description = '';        for (let i = 0; i < topUsers.length; i++) {          const userData = topUsers[i];          const user = await client.users.fetch(userData.userId).catch(() => null);          const username = user ? user.tag : userData.userId;          const emoji = client.userReputation.getReputationEmoji(userData.trustLevel);          description += `**${i + 1}.** ${emoji} <@${userData.userId}> - **${userData.score.toFixed(2)}** puan\n`;        }        embed.setDescription(description);      }      return message.reply({ embeds: [embed] });    } catch (error) {      console.error('Error showing top users:', error);      return message.reply('İtibar sıralaması görüntülenirken bir hata oluştu.');    }  },  async showBottomUsers(message, client) {    try {      const bottomUsers = client.userReputation.getBottomUsers(message.guild.id, 10);      const embed = new EmbedBuilder()        .setTitle('📉 İtibar Sıralaması - En Düşük')        .setDescription(`${message.guild.name} sunucusundaki en düşük itibar puanına sahip kullanıcılar`)        .setColor('#e74c3c')        .setTimestamp()        .setFooter({ text: 'Kullanıcı İtibar Sistemi' });      if (bottomUsers.length === 0) {        embed.addFields({ name: 'Veri Bulunamadı', value: 'Henüz yeterli itibar verisi bulunmamaktadır.' });      } else {        let description = '';        for (let i = 0; i < bottomUsers.length; i++) {          const userData = bottomUsers[i];          const user = await client.users.fetch(userData.userId).catch(() => null);          const username = user ? user.tag : userData.userId;          const emoji = client.userReputation.getReputationEmoji(userData.trustLevel);          description += `**${i + 1}.** ${emoji} <@${userData.userId}> - **${userData.score.toFixed(2)}** puan\n`;        }        embed.setDescription(description);      }      return message.reply({ embeds: [embed] });    } catch (error) {      console.error('Error showing bottom users:', error);      return message.reply('İtibar sıralaması görüntülenirken bir hata oluştu.');    }  }}; 