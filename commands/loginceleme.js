const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, ComponentType } = require('discord.js');const fs = require('fs').promises;const path = require('path');module.exports = {  name: 'loginceleme',  description: 'Log kayıtlarını detaylı bir şekilde incelemenizi sağlar',  async execute(message, args, client) {    const logTypes = [      { id: 'mesaj', name: '📝 Mesaj Logları', description: 'Mesaj gönderme, silme, düzenleme işlemleri', emoji: '📝', color: '#5865F2' },      { id: 'uye', name: '👤 Üye Logları', description: 'Sunucuya giriş, çıkış, yasaklama işlemleri', emoji: '👤', color: '#FF5555' },      { id: 'ses', name: '🔊 Ses Logları', description: 'Ses kanalı giriş/çıkış ve durum değişiklikleri', emoji: '🔊', color: '#43B581' },      { id: 'kanal', name: '📂 Kanal Logları', description: 'Kanal oluşturma, silme, güncelleme işlemleri', emoji: '📂', color: '#FAA61A' },      { id: 'rol', name: '👑 Rol Logları', description: 'Rol oluşturma, silme, güncelleme işlemleri', emoji: '👑', color: '#EB459E' }    ];    const logDir = path.join(__dirname, '..', 'logs');    const selectMenu = new StringSelectMenuBuilder()      .setCustomId('log_type')      .setPlaceholder('İncelemek istediğiniz log türünü seçin')      .addOptions(        logTypes.map(type =>           new StringSelectMenuOptionBuilder()            .setLabel(type.name)            .setDescription(type.description)            .setValue(type.id)            .setEmoji(type.emoji)        )      );    const row = new ActionRowBuilder().addComponents(selectMenu);    const mainEmbed = new EmbedBuilder()      .setTitle('📊 Log İnceleme Sistemi')      .setDescription('Discord sunucunuzdaki log kayıtlarını detaylı bir şekilde inceleyebilirsiniz. Aşağıdaki menüden incelemek istediğiniz log türünü seçin.')      .setColor('#5865F2')      .addFields({        name: '📋 Mevcut Log Türleri',        value: logTypes.map(type => `${type.emoji} **${type.name}** - ${type.description}`).join('\n'),        inline: false      })      .setFooter({ text: 'Discord Logger - Detaylı Log İnceleme Sistemi' })      .setTimestamp();    try {      const response = await message.reply({        embeds: [mainEmbed],        components: [row]      });      const logCache = {};      const collector = response.createMessageComponentCollector({         componentType: ComponentType.StringSelect,        time: 300000       });      collector.on('collect', async (interaction) => {        if (interaction.user.id !== message.author.id) {          return interaction.reply({             content: '❌ Bu menüyü sadece komutu çalıştıran kişi kullanabilir!',             ephemeral: true           });        }        collector.resetTimer();        const selectedLogType = interaction.values[0];        const logTypeInfo = logTypes.find(type => type.id === selectedLogType);        if (!logTypeInfo) {          return interaction.reply({             content: '❌ Geçersiz log türü!',             ephemeral: true           });        }        let logData;        if (logCache[selectedLogType]) {          logData = logCache[selectedLogType];        } else {          try {            const logFilePath = path.join(logDir, `${selectedLogType}.log`);            let rawData;            try {              rawData = await fs.readFile(logFilePath, 'utf8');            } catch (error) {              if (error.code === 'ENOENT') {                rawData = '[]';              } else {                throw error;              }            }            logData = JSON.parse(rawData);            logCache[selectedLogType] = logData;          } catch (error) {            console.error(`Log dosyası okuma hatası: ${error}`);            return interaction.reply({              content: `❌ Log verilerini okurken bir hata oluştu: ${error.message}`,              ephemeral: true            });          }        }        logData.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));        const itemsPerPage = 5;        const totalPages = Math.ceil(logData.length / itemsPerPage) || 1;        let currentPage = 0;        const createLogContent = (page) => {          const startIdx = page * itemsPerPage;          const endIdx = Math.min(startIdx + itemsPerPage, logData.length);          const pageItems = logData.slice(startIdx, endIdx);          if (pageItems.length === 0) {            return '```\nBu log türü için kayıt bulunamadı.\n```';          }          return pageItems.map((log, idx) => {            const date = new Date(log.timestamp).toLocaleString('tr-TR');            const title = `${idx + 1 + startIdx}. [${date}] ${log.title || 'İsimsiz Log'}`;            let content = '';            if (selectedLogType === 'mesaj') {              content = `Kullanıcı: ${log.user?.tag || 'Bilinmiyor'}\nKanal: ${log.channel?.name || 'Bilinmiyor'}\nİçerik: ${log.content || 'İçerik yok'}\nİşlem: ${log.action || 'Bilinmiyor'}`;            } else if (selectedLogType === 'uye') {              content = `Kullanıcı: ${log.user?.tag || 'Bilinmiyor'}\nID: ${log.userId || 'Bilinmiyor'}\nİşlem: ${log.action || 'Bilinmiyor'}\nYetkili: ${log.moderator?.tag || 'Sistem'}`;            } else if (selectedLogType === 'ses') {              content = `Kullanıcı: ${log.user?.tag || 'Bilinmiyor'}\nKanal: ${log.channel?.name || 'Bilinmiyor'}\nDurum: ${log.state || 'Bilinmiyor'}\nDeğişiklik: ${log.change || 'Bilinmiyor'}`;            } else if (selectedLogType === 'kanal') {              content = `Kanal: ${log.channel?.name || 'Bilinmiyor'}\nTür: ${log.channelType || 'Bilinmiyor'}\nİşlem: ${log.action || 'Bilinmiyor'}\nYetkili: ${log.moderator?.tag || 'Sistem'}`;            } else if (selectedLogType === 'rol') {              content = `Rol: ${log.role?.name || 'Bilinmiyor'}\nİşlem: ${log.action || 'Bilinmiyor'}\nHedef: ${log.target?.tag || 'Bilinmiyor'}\nYetkili: ${log.moderator?.tag || 'Sistem'}`;            } else {              content = JSON.stringify(log, null, 2);            }            return `**${title}**\n\`\`\`\n${content}\n\`\`\`\n`;          }).join('\n');        };        const createLogEmbed = (page) => {          return new EmbedBuilder()            .setTitle(`${logTypeInfo.emoji} ${logTypeInfo.name} - Detaylı İnceleme`)            .setDescription(createLogContent(page))            .setColor(logTypeInfo.color)            .setFooter({ text: `Sayfa ${page + 1}/${totalPages} • Toplam ${logData.length} kayıt • Discord Logger` })            .setTimestamp();        };        const createNavButtons = () => {          const navRow = new ActionRowBuilder()            .addComponents(              new ButtonBuilder()                .setCustomId('first_page')                .setLabel('⏮️ İlk')                .setStyle(ButtonStyle.Primary)                .setDisabled(currentPage === 0),              new ButtonBuilder()                .setCustomId('prev_page')                .setLabel('◀️ Önceki')                .setStyle(ButtonStyle.Secondary)                .setDisabled(currentPage === 0),              new ButtonBuilder()                .setCustomId('next_page')                .setLabel('Sonraki ▶️')                .setStyle(ButtonStyle.Secondary)                .setDisabled(currentPage === totalPages - 1),              new ButtonBuilder()                .setCustomId('last_page')                .setLabel('Son ⏭️')                .setStyle(ButtonStyle.Primary)                .setDisabled(currentPage === totalPages - 1),              new ButtonBuilder()                .setCustomId('back_to_menu')                .setLabel('🔍 Menüye Dön')                .setStyle(ButtonStyle.Danger)            );          const filterRow = new ActionRowBuilder()            .addComponents(              new StringSelectMenuBuilder()                .setCustomId('filter_by')                .setPlaceholder('Filtreleme seçenekleri')                .addOptions([                  new StringSelectMenuOptionBuilder()                    .setLabel('Tüm Kayıtlar')                    .setDescription('Tüm log kayıtlarını göster')                    .setValue('all')                    .setEmoji('📋'),                  new StringSelectMenuOptionBuilder()                    .setLabel('Bugünkü Kayıtlar')                    .setDescription('Sadece bugüne ait kayıtları göster')                    .setValue('today')                    .setEmoji('📅'),                  new StringSelectMenuOptionBuilder()                    .setLabel('Son 24 Saat')                    .setDescription('Son 24 saate ait kayıtları göster')                    .setValue('last24')                    .setEmoji('⏱️'),                  new StringSelectMenuOptionBuilder()                    .setLabel('Ekleme İşlemleri')                    .setDescription('Sadece ekleme/oluşturma işlemlerini göster')                    .setValue('add')                    .setEmoji('➕'),                  new StringSelectMenuOptionBuilder()                    .setLabel('Silme İşlemleri')                    .setDescription('Sadece silme işlemlerini göster')                    .setValue('delete')                    .setEmoji('🗑️'),                  new StringSelectMenuOptionBuilder()                    .setLabel('Düzenleme İşlemleri')                    .setDescription('Sadece düzenleme işlemlerini göster')                    .setValue('edit')                    .setEmoji('✏️')                ])            );          return [navRow, filterRow];        };        await interaction.update({          embeds: [createLogEmbed(currentPage)],          components: createNavButtons()        });        const buttonCollector = response.createMessageComponentCollector({           componentType: ComponentType.Button,          time: 300000         });        buttonCollector.on('collect', async (btnInteraction) => {          if (btnInteraction.user.id !== message.author.id) {            return btnInteraction.reply({               content: '❌ Bu menüyü sadece komutu çalıştıran kişi kullanabilir!',               ephemeral: true             });          }          buttonCollector.resetTimer();          if (btnInteraction.customId === 'first_page') {            currentPage = 0;          } else if (btnInteraction.customId === 'prev_page') {            currentPage = Math.max(0, currentPage - 1);          } else if (btnInteraction.customId === 'next_page') {            currentPage = Math.min(totalPages - 1, currentPage + 1);          } else if (btnInteraction.customId === 'last_page') {            currentPage = totalPages - 1;          } else if (btnInteraction.customId === 'back_to_menu') {            await btnInteraction.update({              embeds: [mainEmbed],              components: [row]            });            buttonCollector.stop();            return;          }          await btnInteraction.update({            embeds: [createLogEmbed(currentPage)],            components: createNavButtons()          });        });        const filterCollector = response.createMessageComponentCollector({           componentType: ComponentType.StringSelect,          time: 300000         });        filterCollector.on('collect', async (selectInteraction) => {          if (selectInteraction.user.id !== message.author.id) {            return selectInteraction.reply({               content: '❌ Bu menüyü sadece komutu çalıştıran kişi kullanabilir!',               ephemeral: true             });          }          filterCollector.resetTimer();          if (selectInteraction.customId === 'log_type') {            buttonCollector.stop();            return;          }          if (selectInteraction.customId === 'filter_by') {            const filterType = selectInteraction.values[0];            let filteredData = [...logCache[selectedLogType]];            const now = new Date();            if (filterType === 'today') {              filteredData = filteredData.filter(log => {                const logDate = new Date(log.timestamp);                return logDate.getDate() === now.getDate() &&                       logDate.getMonth() === now.getMonth() &&                       logDate.getFullYear() === now.getFullYear();              });            } else if (filterType === 'last24') {              const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);              filteredData = filteredData.filter(log => new Date(log.timestamp) >= oneDayAgo);            } else if (filterType === 'add') {              filteredData = filteredData.filter(log =>                 log.action?.toLowerCase().includes('ekle') ||                 log.action?.toLowerCase().includes('oluştur') ||                 log.action?.toLowerCase().includes('create') ||                 log.action?.toLowerCase().includes('add')              );            } else if (filterType === 'delete') {              filteredData = filteredData.filter(log =>                 log.action?.toLowerCase().includes('sil') ||                 log.action?.toLowerCase().includes('delete') ||                 log.action?.toLowerCase().includes('remove')              );            } else if (filterType === 'edit') {              filteredData = filteredData.filter(log =>                 log.action?.toLowerCase().includes('düzenle') ||                 log.action?.toLowerCase().includes('güncelle') ||                 log.action?.toLowerCase().includes('edit') ||                 log.action?.toLowerCase().includes('update')              );            }            logData = filteredData;            currentPage = 0;            const totalFilteredPages = Math.ceil(logData.length / itemsPerPage) || 1;            const filteredEmbed = new EmbedBuilder()              .setTitle(`${logTypeInfo.emoji} ${logTypeInfo.name} - ${selectInteraction.component.options.find(o => o.value === filterType).label}`)              .setDescription(logData.length > 0 ? createLogContent(currentPage) : '```\nBu filtre için kayıt bulunamadı.\n```')              .setColor(logTypeInfo.color)              .setFooter({ text: `Sayfa ${currentPage + 1}/${totalFilteredPages} • Toplam ${logData.length} kayıt • Filtre: ${selectInteraction.component.options.find(o => o.value === filterType).label}` })              .setTimestamp();            await selectInteraction.update({              embeds: [filteredEmbed],              components: createNavButtons()            });          }        });      });      collector.on('end', async () => {        const disabledRow = new ActionRowBuilder()          .addComponents(            selectMenu.setDisabled(true)          );        await response.edit({          components: [disabledRow]        }).catch(() => {});      });    } catch (error) {      console.error('Log inceleme hatası:', error);      return message.reply('❌ Log inceleme sistemi başlatılırken bir hata oluştu!');    }  }}; 