const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');const os = require('os');module.exports = {  name: 'istatistik',  description: 'Bot istatistiklerini ve sistem bilgilerini gösterir',  async execute(message, args, client) {    const uptime = client.readyAt ? Date.now() - client.readyAt : client.uptime;    const uptimeSeconds = Math.floor(uptime / 1000);    const days = Math.floor(uptimeSeconds / 86400);    const hours = Math.floor((uptimeSeconds % 86400) / 3600);    const minutes = Math.floor((uptimeSeconds % 3600) / 60);    const seconds = Math.floor(uptimeSeconds % 60);    const uptimeString = `${days ? `${days} gün, ` : ''}${hours ? `${hours} saat, ` : ''}${minutes ? `${minutes} dakika, ` : ''}${seconds} saniye`;    const totalMem = (os.totalmem() / 1024 / 1024).toFixed(2);    const freeMem = (os.freemem() / 1024 / 1024).toFixed(2);    const usedMem = (totalMem - freeMem).toFixed(2);    const memUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);    const memoryPercentage = ((memUsage / totalMem) * 100).toFixed(1);    const cpus = os.cpus();    const cpuCount = cpus.length;    const cpuModel = cpus[0].model;    const cpuSpeed = (cpus[0].speed / 1000).toFixed(2);    const djsVersion = require('discord.js').version;    const nodeVersion = process.version;    const ping = client.ws.ping;    const guildCount = client.guilds.cache.size;    const userCount = client.guilds.cache.reduce((acc, guild) => acc + guild.memberCount, 0);    const channelCount = client.channels.cache.size;    const commandCount = client.commands ? client.commands.size : 0;    const loadTime = client.readyTimestamp ? (client.readyTimestamp - client.createdTimestamp) / 1000 : 'N/A';    const createProgressBar = (percentage) => {      const filledChar = '█';      const emptyChar = '░';      const barLength = 20;      const filledLength = Math.round(barLength * (percentage / 100));      const emptyLength = barLength - filledLength;      return filledChar.repeat(filledLength) + emptyChar.repeat(emptyLength);    };    const memoryBar = createProgressBar(usedMem / totalMem * 100);    const hoursInDay = 24;    const uptimeHours = days * 24 + hours;    const uptimePercentageOfDay = Math.min(100, (uptimeHours / hoursInDay) * 100);    const uptimeBar = createProgressBar(uptimePercentageOfDay);    const row = new ActionRowBuilder()      .addComponents(        new ButtonBuilder()          .setCustomId('overview')          .setLabel('📊 Genel Bakış')          .setStyle(ButtonStyle.Primary),        new ButtonBuilder()          .setCustomId('system')          .setLabel('💻 Sistem Bilgisi')          .setStyle(ButtonStyle.Secondary),        new ButtonBuilder()          .setCustomId('usage')          .setLabel('📈 Kullanım İstatistikleri')          .setStyle(ButtonStyle.Secondary)      );    const overviewEmbed = new EmbedBuilder()      .setTitle('🌟 Bot İstatistikleri - Genel Bakış')      .setDescription(`\`\`\`ansi[2;34m${client.user.tag}[0m bilgileri ve performans metrikleri aşağıda gösterilmektedir.\`\`\``)      .setColor('#5865F2')      .setThumbnail(client.user.displayAvatarURL({ dynamic: true, size: 256 }))      .addFields(        {          name: '⏱️ Çalışma Süresi',          value: `\`\`\`ansi[2;33m${uptimeString}[0m[0;90m${uptimeBar}[0m [2;33m${uptimePercentageOfDay.toFixed(1)}%[0m\`\`\``,          inline: false        },        {          name: '🔌 Discord API Ping',          value: `\`\`\`ansi[2;${ping < 100 ? '32' : ping < 200 ? '33' : '31'}m${ping}ms[0m\`\`\``,          inline: true        },        {          name: '📊 Sunucular',          value: `\`\`\`ansi[2;35m${guildCount.toLocaleString()}[0m sunucu\`\`\``,          inline: true        },        {          name: '👥 Kullanıcılar',          value: `\`\`\`ansi[2;35m${userCount.toLocaleString()}[0m kullanıcı\`\`\``,          inline: true        },        {          name: '💾 Bellek Kullanımı',          value: `\`\`\`ansiBot: [2;34m${memUsage} MB[0m ([2;33m${memoryPercentage}%[0m)Sistem: [2;34m${usedMem} MB[0m / [2;34m${totalMem} MB[0m[0;90m${memoryBar}[0m [2;33m${((usedMem / totalMem) * 100).toFixed(1)}%[0m\`\`\``,          inline: false        },        {          name: '📊 Bellek Dağılımı',          value: `\`\`\`ansi[0;34m${'■'.repeat(10)}[0m Bot: ${memUsage} MB[0;31m${'■'.repeat(5)}[0m Sistem: ${(usedMem - memUsage).toFixed(2)} MB[0;32m${'■'.repeat(5)}[0m Boş: ${freeMem} MB\`\`\``,          inline: false        }      )      .setFooter({ text: `${client.user.tag} | Oluşturulma: ${client.user.createdAt.toLocaleDateString('tr-TR')}` })      .setTimestamp();    const systemEmbed = new EmbedBuilder()      .setTitle('💻 Bot İstatistikleri - Sistem Bilgisi')      .setColor('#FF5555')      .setThumbnail(client.user.displayAvatarURL({ dynamic: true, size: 256 }))      .addFields(        {          name: '📡 İşletim Sistemi',          value: `\`\`\`ansi[2;36m${os.type()} ${os.release()}[0m ([2;33m${os.arch()}[0m)\`\`\``,          inline: false        },        {          name: '🖥️ CPU Bilgisi',          value: `\`\`\`ansiModel: [2;36m${cpuModel}[0mÇekirdek: [2;33m${cpuCount}[0m adetHız: [2;33m${cpuSpeed}[0m GHz\`\`\``,          inline: false        },        {          name: '🧠 Bellek Bilgisi',          value: `\`\`\`ansiToplam: [2;33m${totalMem} MB[0m ([2;36m${(totalMem / 1024).toFixed(2)} GB[0m)Kullanılabilir: [2;33m${freeMem} MB[0m ([2;36m${(freeMem / 1024).toFixed(2)} GB[0m)\`\`\``,          inline: false        },        {          name: '⚙️ Yazılım Versiyonları',          value: `\`\`\`ansiNode.js: [2;32m${nodeVersion}[0mDiscord.js: [2;32mv${djsVersion}[0m\`\`\``,          inline: false        },        {          name: '🔄 Performans',          value: `\`\`\`ansiYükleme Süresi: [2;33m${loadTime}[0m saniyeUptime: [2;33m${uptimeString}[0m\`\`\``,          inline: false        },        {          name: '📶 Ağ',          value: `\`\`\`ansiHostname: [2;36m${os.hostname()}[0mPlatform: [2;33m${os.platform()}[0m\`\`\``,          inline: false        }      )      .setFooter({ text: `${os.hostname()} | ${os.platform()} ${os.release()}` })      .setTimestamp();    const usageEmbed = new EmbedBuilder()      .setTitle('📈 Bot İstatistikleri - Kullanım')      .setColor('#43B581')      .setThumbnail(client.user.displayAvatarURL({ dynamic: true, size: 256 }))      .addFields(        {          name: '🤖 Bot Bilgileri',          value: `\`\`\`ansiID: [2;36m${client.user.id}[0mTag: [2;36m${client.user.tag}[0mOluşturulma: [2;36m${client.user.createdAt.toLocaleDateString('tr-TR')}[0m\`\`\``,          inline: false        },        {          name: '📊 Sunucu İstatistikleri',          value: `\`\`\`ansiSunucular: [2;33m${guildCount.toLocaleString()}[0mKullanıcılar: [2;33m${userCount.toLocaleString()}[0mKanallar: [2;33m${channelCount.toLocaleString()}[0m\`\`\``,          inline: false        },        {          name: '🔧 Komut Bilgileri',          value: `\`\`\`ansiKomut Sayısı: [2;33m${commandCount}[0mPrefix: [2;36m.[0m\`\`\``,          inline: false        },        {          name: '🔊 Log Sistemi',          value: `\`\`\`ansi✓ [2;32mMesaj Logları[0m✓ [2;32mÜye Logları[0m✓ [2;32mSes Logları[0m✓ [2;32mKanal Logları[0m✓ [2;32mRol Logları[0m✓ [2;32mEmoji Logları[0m✓ [2;32mDavet Logları[0m✓ [2;32mWebhook Logları[0m\`\`\``,          inline: false        }      )      .setFooter({ text: 'Daha detaylı istatistikler için lütfen yardım menüsüne bakın.' })      .setTimestamp();    const response = await message.reply({      embeds: [overviewEmbed],      components: [row]    });    const collector = response.createMessageComponentCollector({ time: 60000 });    collector.on('collect', async (interaction) => {      if (interaction.user.id !== message.author.id) {        return interaction.reply({          content: '❌ Bu menüyü sadece komutu kullanan kişi kullanabilir!',          ephemeral: true        });      }      collector.resetTimer();      if (interaction.customId === 'overview') {        await interaction.update({          embeds: [overviewEmbed]        });      } else if (interaction.customId === 'system') {        await interaction.update({          embeds: [systemEmbed]        });      } else if (interaction.customId === 'usage') {        await interaction.update({          embeds: [usageEmbed]        });      }    });    collector.on('end', async () => {      const disabledRow = new ActionRowBuilder()        .addComponents(          new ButtonBuilder()            .setCustomId('overview')            .setLabel('📊 Genel Bakış')            .setStyle(ButtonStyle.Primary)            .setDisabled(true),          new ButtonBuilder()            .setCustomId('system')            .setLabel('💻 Sistem Bilgisi')            .setStyle(ButtonStyle.Secondary)            .setDisabled(true),          new ButtonBuilder()            .setCustomId('usage')            .setLabel('📈 Kullanım İstatistikleri')            .setStyle(ButtonStyle.Secondary)            .setDisabled(true)        );      await response.edit({ components: [disabledRow] }).catch(() => {});    });  }}; 