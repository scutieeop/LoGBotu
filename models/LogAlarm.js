const InMemoryStorage = require('../utils/inMemoryStorage');const logAlarmStorage = new InMemoryStorage('logAlarms');function createLogAlarm(alarmData) {  if (!alarmData.guildId || !alarmData.type || !alarmData.message) {    throw new Error('Missing required fields: guildId, type, and message are required');  }  const alarm = {    ...alarmData,    enabled: alarmData.enabled !== undefined ? alarmData.enabled : true,    notifyType: alarmData.notifyType || 'channel',    notifyConfig: alarmData.notifyConfig || {},    metadata: alarmData.metadata || {},    createdAt: new Date(),    updatedAt: new Date(),    lastTriggered: null,    triggerCount: 0  };  return logAlarmStorage.add(alarm);}function getLogAlarms(filters = {}) {  return logAlarmStorage.find(alarm => {    let match = true;    if (filters.guildId) {      match = match && alarm.guildId === filters.guildId;    }    if (filters.type) {      match = match && alarm.type === filters.type;    }    if (filters.enabled !== undefined) {      match = match && alarm.enabled === filters.enabled;    }    return match;  });}function getLogAlarmById(id) {  return logAlarmStorage.get(id);}function updateLogAlarm(id, updates) {  const alarm = logAlarmStorage.get(id);  if (!alarm) return null;  const safeUpdates = { ...updates };  delete safeUpdates.id;  delete safeUpdates.createdAt;  delete safeUpdates.triggerCount;   safeUpdates.updatedAt = new Date();  return logAlarmStorage.update(id, safeUpdates);}function deleteLogAlarm(id) {  return logAlarmStorage.remove(id);}function setLogAlarmEnabled(id, enabled) {  return updateLogAlarm(id, { enabled });}function incrementTriggerCount(id) {  const alarm = logAlarmStorage.get(id);  if (!alarm) return null;  const updates = {    triggerCount: alarm.triggerCount + 1,    lastTriggered: new Date()  };  return logAlarmStorage.update(id, updates);}function findMatchingAlarms(guildId, logType, logMessage) {  if (!guildId || !logType || !logMessage) {    return [];  }  return logAlarmStorage.find(alarm => {    if (!alarm.enabled || alarm.guildId !== guildId || alarm.type !== logType) {      return false;    }    return logMessage.includes(alarm.message);  });}function deleteGuildAlarms(guildId) {  if (!guildId) {    throw new Error('Guild ID is required');  }  const alarmsToDelete = logAlarmStorage.find(alarm => alarm.guildId === guildId);  let deletedCount = 0;  for (const alarm of alarmsToDelete) {    if (logAlarmStorage.remove(alarm.id)) {      deletedCount++;    }  }  return {    success: true,    deletedCount  };}module.exports = {  createLogAlarm,  getLogAlarms,  getLogAlarmById,  updateLogAlarm,  deleteLogAlarm,  setLogAlarmEnabled,  incrementTriggerCount,  findMatchingAlarms,  deleteGuildAlarms}; 