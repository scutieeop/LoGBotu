const InMemoryStorage = require('../utils/inMemoryStorage');const userTrackStorage = new InMemoryStorage('userTracks');function trackUserActivity(guildId, userId, action, data = {}) {  if (!guildId || !userId || !action) {    throw new Error('Missing required parameters: guildId, userId, and action are required');  }  const activityRecord = {    guildId,    userId,    action,    data,    timestamp: new Date()  };  return userTrackStorage.add(activityRecord);}function getUserActivity(filters = {}, limit = 100) {  const { guildId, userId } = filters;  return userTrackStorage.find(record => {    let match = true;    if (guildId) {      match = match && record.guildId === guildId;    }    if (userId) {      match = match && record.userId === userId;    }    return match;  })  .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))  .slice(0, limit);}function getUserActivitySummary(guildId, userId) {  if (!guildId || !userId) {    throw new Error('Missing required parameters: guildId and userId are required');  }  const activities = getUserActivity({ guildId, userId });  if (activities.length === 0) {    return {      userId,      guildId,      totalActions: 0,      actionCounts: {},      firstActivity: null,      lastActivity: null    };  }  const actionCounts = activities.reduce((counts, record) => {    counts[record.action] = (counts[record.action] || 0) + 1;    return counts;  }, {});  const sortedActivities = [...activities].sort((a, b) =>     new Date(a.timestamp) - new Date(b.timestamp)  );  return {    userId,    guildId,    totalActions: activities.length,    actionCounts,    firstActivity: sortedActivities[0].timestamp,    lastActivity: sortedActivities[sortedActivities.length - 1].timestamp  };}function deleteUserActivity(guildId, userId) {  if (!guildId || !userId) {    throw new Error('Missing required parameters: guildId and userId are required');  }  const recordsToDelete = userTrackStorage.find(record =>     record.guildId === guildId && record.userId === userId  );  let deletedCount = 0;  for (const record of recordsToDelete) {    if (userTrackStorage.remove(record.id)) {      deletedCount++;    }  }  return {    success: true,    deletedCount  };}module.exports = {  trackUserActivity,  getUserActivity,  getUserActivitySummary,  deleteUserActivity}; 