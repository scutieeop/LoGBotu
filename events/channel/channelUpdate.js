const { EmbedBuilder, ChannelType } = require('discord.js');module.exports = {  name: 'channelUpdate',  async execute(client, oldChannel, newChannel) {    if (!oldChannel.guild) return;    if (!client.config.logTypes.CHANNEL) return;    function guild_getChannelTypeString(type) {      const types = {        [ChannelType.GuildText]: 'Metin Kanalı',        [ChannelType.GuildVoice]: 'Ses Kanalı',        [ChannelType.GuildCategory]: 'Kategori',        [ChannelType.GuildAnnouncement]: 'Duyuru Kanalı',        [ChannelType.AnnouncementThread]: 'Duyuru İş Parçacığı',        [ChannelType.PublicThread]: 'Genel İş Parçacığı',        [ChannelType.PrivateThread]: 'Özel İş Parçacığı',        [ChannelType.GuildStageVoice]: 'Sahne Kanalı',        [ChannelType.GuildForum]: 'Forum Kanalı',        [ChannelType.GuildDirectory]: 'Dizin Kanalı'      };      return types[type] || 'Bilinmeyen Kanal Türü';    }    function guild_getChannelIcon(type) {      const icons = {        [ChannelType.GuildText]: '📝',        [ChannelType.GuildVoice]: '🔊',        [ChannelType.GuildCategory]: '📁',        [ChannelType.GuildAnnouncement]: '📢',        [ChannelType.AnnouncementThread]: '🧵',        [ChannelType.PublicThread]: '🧵',        [ChannelType.PrivateThread]: '🔒',        [ChannelType.GuildStageVoice]: '🎭',        [ChannelType.GuildForum]: '💬',        [ChannelType.GuildDirectory]: '📚'      };      return icons[type] || '❓';    }    async function guild_getAuditInfo(guild, channelId) {      try {        const fetchedLogs = await guild.fetchAuditLogs({          limit: 1,          type: 11         });        const log = fetchedLogs.entries.first();        if (log && log.target.id === channelId && (log.createdTimestamp > (Date.now() - 5000))) {          return {            executor: log.executor,            reason: log.reason          };        }        return {          executor: null,          reason: null        };      } catch (error) {        console.error('Audit log fetching error:', error);        return {          executor: null,          reason: null        };      }    }    if (oldChannel.name === newChannel.name &&        oldChannel.type === newChannel.type &&        oldChannel.topic === newChannel.topic &&        oldChannel.nsfw === newChannel.nsfw &&        oldChannel.parentId === newChannel.parentId &&        oldChannel.position === newChannel.position &&        oldChannel.rateLimitPerUser === newChannel.rateLimitPerUser &&        oldChannel.bitrate === newChannel.bitrate &&        oldChannel.userLimit === newChannel.userLimit) {      return;    }    const auditInfo = await guild_getAuditInfo(newChannel.guild, newChannel.id);    const channelType = guild_getChannelTypeString(newChannel.type);    const channelIcon = guild_getChannelIcon(newChannel.type);    const fields = [      { name: 'Kanal ID', value: newChannel.id, inline: true },      { name: 'Kanal Türü', value: channelType, inline: true }    ];    if (oldChannel.name !== newChannel.name) {      fields.push({        name: 'İsim Değişikliği',        value: `${oldChannel.name} → ${newChannel.name}`,        inline: false      });    }    if (oldChannel.parentId !== newChannel.parentId) {      const oldParent = oldChannel.parent ? `${oldChannel.parent.name}` : 'Yok';      const newParent = newChannel.parent ? `${newChannel.parent.name}` : 'Yok';      fields.push({        name: 'Kategori Değişikliği',        value: `${oldParent} → ${newParent}`,        inline: false      });    }    if (oldChannel.position !== newChannel.position) {      fields.push({        name: 'Pozisyon Değişikliği',        value: `${oldChannel.position} → ${newChannel.position}`,        inline: false      });    }    if (oldChannel.type === ChannelType.GuildText || oldChannel.type === ChannelType.GuildAnnouncement) {      if (oldChannel.topic !== newChannel.topic) {        fields.push({          name: 'Konu Değişikliği',          value: `${oldChannel.topic || 'Yok'} → ${newChannel.topic || 'Yok'}`,          inline: false        });      }      if (oldChannel.nsfw !== newChannel.nsfw) {        fields.push({          name: 'NSFW Değişikliği',          value: `${oldChannel.nsfw ? 'Evet' : 'Hayır'} → ${newChannel.nsfw ? 'Evet' : 'Hayır'}`,          inline: false        });      }      if (oldChannel.rateLimitPerUser !== newChannel.rateLimitPerUser) {        const oldLimit = oldChannel.rateLimitPerUser ? `${oldChannel.rateLimitPerUser} saniye` : 'Kapalı';        const newLimit = newChannel.rateLimitPerUser ? `${newChannel.rateLimitPerUser} saniye` : 'Kapalı';        fields.push({          name: 'Yavaş Mod Değişikliği',          value: `${oldLimit} → ${newLimit}`,          inline: false        });      }    }    if ((oldChannel.type === ChannelType.GuildVoice || oldChannel.type === ChannelType.GuildStageVoice) &&        (newChannel.type === ChannelType.GuildVoice || newChannel.type === ChannelType.GuildStageVoice)) {      if (oldChannel.bitrate !== newChannel.bitrate) {        fields.push({          name: 'Bit Hızı Değişikliği',          value: `${oldChannel.bitrate / 1000}kbps → ${newChannel.bitrate / 1000}kbps`,          inline: false        });      }      if (oldChannel.userLimit !== newChannel.userLimit) {        const oldLimit = oldChannel.userLimit || 'Limitsiz';        const newLimit = newChannel.userLimit || 'Limitsiz';        fields.push({          name: 'Kullanıcı Limiti Değişikliği',          value: `${oldLimit} → ${newLimit}`,          inline: false        });      }    }    if (auditInfo.executor) {      const formattedUser = await client.logger.guild_formatUser(auditInfo.executor);      fields.push({        name: 'Düzenleyen',        value: `<@${formattedUser.id}> (${formattedUser.name})`,        inline: true      });      if (auditInfo.reason) {        fields.push({          name: 'Sebep',          value: auditInfo.reason,          inline: false        });      }    }    await client.logger.guild_sendLog('channel', {      guildId: newChannel.guild.id,      title: `${channelIcon} Kanal Güncellendi`,      description: `**${newChannel.name}** kanalı güncellendi`,      color: client.config.colors.warning,      fields: fields,      footer: `${new Date().toLocaleString()}`,      username: `${newChannel.guild.name} - Kanal Güncelleme`,      avatarURL: newChannel.guild.iconURL({ dynamic: true })    });  }}; 