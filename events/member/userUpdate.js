const { EmbedBuilder } = require('discord.js');module.exports = {  name: 'userUpdate',  async execute(client, oldUser, newUser) {    if (oldUser.bot || newUser.bot) return;    if (oldUser.username === newUser.username &&         oldUser.discriminator === newUser.discriminator &&         oldUser.avatar === newUser.avatar &&         oldUser.banner === newUser.banner &&        oldUser.bio === newUser.bio) return;    const bioChanged = oldUser.bio !== newUser.bio;    client.guilds.cache.forEach(async (guild) => {      const member = guild.members.cache.get(newUser.id) ||                      await guild.members.fetch(newUser.id).catch(() => null);      if (!member) return;      const formattedUser = await client.logger.guild_formatUser(newUser);      const fields = [];      if (oldUser.username !== newUser.username || oldUser.discriminator !== newUser.discriminator) {        fields.push({          name: '📝 Kullanıcı Adı Değişikliği',          value: `**Eski:** ${oldUser.tag}\n**Yeni:** ${newUser.tag}`,          inline: false        });      }      if (oldUser.avatar !== newUser.avatar) {        fields.push({          name: '🖼️ Profil Resmi Değişikliği',          value: `Kullanıcı profil resmi değiştirildi.`,          inline: false        });      }      if (oldUser.banner !== newUser.banner) {        fields.push({          name: '🏙️ Banner Değişikliği',          value: `Kullanıcı banner'ı değiştirildi.`,          inline: false        });      }      if (bioChanged) {        fields.push({          name: '📋 Biyografi Değişikliği',          value: `**Eski:**\n${oldUser.bio || '*Yok*'}\n\n**Yeni:**\n${newUser.bio || '*Yok*'}`,          inline: false        });        await handleBioRoleAssignment(client, guild, member, newUser.bio);      }      if (fields.length === 0) return;      await client.logger.guild_sendLog('member', {        guildId: guild.id,        title: '👤 Kullanıcı Bilgileri Güncellendi',        color: client.config.colors.info,        thumbnail: formattedUser.avatar,        fields: [          { name: 'Kullanıcı', value: `<@${formattedUser.id}> (${formattedUser.name})`, inline: true },          { name: 'ID', value: formattedUser.id, inline: true },          ...fields        ],        footer: `${new Date().toLocaleString()}`,        username: `${guild.name} - Kullanıcı Güncellemesi`,        avatarURL: guild.iconURL({ dynamic: true })      });    });  }};async function handleBioRoleAssignment(client, guild, member, bio) {  if (!client.config.bioRoles || !client.config.bioRoles[guild.id]) return;  const guildBioRoles = client.config.bioRoles[guild.id];  for (const [bioText, roleId] of Object.entries(guildBioRoles)) {    const role = guild.roles.cache.get(roleId);    if (!role) continue;     const hasBioText = bio && bio.toLowerCase().includes(bioText.toLowerCase());    const hasRole = member.roles.cache.has(roleId);    if (hasBioText && !hasRole) {      try {        await member.roles.add(role, 'Biyografide belirtilen metin bulundu');        await client.logger.guild_sendLog('member', {          guildId: guild.id,          title: '✅ Biyografi Rolü Verildi',          color: client.config.colors.success,          thumbnail: member.user.displayAvatarURL({ dynamic: true }),          fields: [            { name: 'Kullanıcı', value: `<@${member.id}> (${member.user.tag})`, inline: true },            { name: 'Verilen Rol', value: `<@&${role.id}> (${role.name})`, inline: true },            { name: 'Biyografi İçeriği', value: bio || '*Yok*', inline: false },            { name: 'Aranan Metin', value: bioText, inline: true }          ],          footer: `${new Date().toLocaleString()}`,          username: `${guild.name} - Biyografi Rol`,          avatarURL: guild.iconURL({ dynamic: true })        });      } catch (error) {        console.error(`Rol verme hatası (${member.id}, ${role.id}):`, error);      }    } else if (!hasBioText && hasRole && guildBioRoles.autoRemove) {      try {        await member.roles.remove(role, 'Biyografide belirtilen metin kaldırıldı');        await client.logger.guild_sendLog('member', {          guildId: guild.id,          title: '❌ Biyografi Rolü Kaldırıldı',          color: client.config.colors.error,          thumbnail: member.user.displayAvatarURL({ dynamic: true }),          fields: [            { name: 'Kullanıcı', value: `<@${member.id}> (${member.user.tag})`, inline: true },            { name: 'Kaldırılan Rol', value: `<@&${role.id}> (${role.name})`, inline: true },            { name: 'Biyografi İçeriği', value: bio || '*Yok*', inline: false },            { name: 'Aranan Metin', value: bioText, inline: true }          ],          footer: `${new Date().toLocaleString()}`,          username: `${guild.name} - Biyografi Rol`,          avatarURL: guild.iconURL({ dynamic: true })        });      } catch (error) {        console.error(`Rol kaldırma hatası (${member.id}, ${role.id}):`, error);      }    }  }} 